/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.dgrid.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class HostState implements TBase, java.io.Serializable {
  private long vmUptime;
  private double loadAverage;
  private long freeMemory;
  private long usedMemory;
  private int activeThreads;
  private int activeTasks;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean vmUptime = false;
    public boolean loadAverage = false;
    public boolean freeMemory = false;
    public boolean usedMemory = false;
    public boolean activeThreads = false;
    public boolean activeTasks = false;
  }

  public HostState() {
  }

  public HostState(
    long vmUptime,
    double loadAverage,
    long freeMemory,
    long usedMemory,
    int activeThreads,
    int activeTasks)
  {
    this();
    this.vmUptime = vmUptime;
    this.__isset.vmUptime = true;
    this.loadAverage = loadAverage;
    this.__isset.loadAverage = true;
    this.freeMemory = freeMemory;
    this.__isset.freeMemory = true;
    this.usedMemory = usedMemory;
    this.__isset.usedMemory = true;
    this.activeThreads = activeThreads;
    this.__isset.activeThreads = true;
    this.activeTasks = activeTasks;
    this.__isset.activeTasks = true;
  }

  public long getVmUptime() {
    return this.vmUptime;
  }

  public void setVmUptime(long vmUptime) {
    this.vmUptime = vmUptime;
    this.__isset.vmUptime = true;
  }

  public void unsetVmUptime() {
    this.__isset.vmUptime = false;
  }

  public double getLoadAverage() {
    return this.loadAverage;
  }

  public void setLoadAverage(double loadAverage) {
    this.loadAverage = loadAverage;
    this.__isset.loadAverage = true;
  }

  public void unsetLoadAverage() {
    this.__isset.loadAverage = false;
  }

  public long getFreeMemory() {
    return this.freeMemory;
  }

  public void setFreeMemory(long freeMemory) {
    this.freeMemory = freeMemory;
    this.__isset.freeMemory = true;
  }

  public void unsetFreeMemory() {
    this.__isset.freeMemory = false;
  }

  public long getUsedMemory() {
    return this.usedMemory;
  }

  public void setUsedMemory(long usedMemory) {
    this.usedMemory = usedMemory;
    this.__isset.usedMemory = true;
  }

  public void unsetUsedMemory() {
    this.__isset.usedMemory = false;
  }

  public int getActiveThreads() {
    return this.activeThreads;
  }

  public void setActiveThreads(int activeThreads) {
    this.activeThreads = activeThreads;
    this.__isset.activeThreads = true;
  }

  public void unsetActiveThreads() {
    this.__isset.activeThreads = false;
  }

  public int getActiveTasks() {
    return this.activeTasks;
  }

  public void setActiveTasks(int activeTasks) {
    this.activeTasks = activeTasks;
    this.__isset.activeTasks = true;
  }

  public void unsetActiveTasks() {
    this.__isset.activeTasks = false;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostState)
      return this.equals((HostState)that);
    return false;
  }

  public boolean equals(HostState that) {
    if (that == null)
      return false;

    boolean this_present_vmUptime = true;
    boolean that_present_vmUptime = true;
    if (this_present_vmUptime || that_present_vmUptime) {
      if (!(this_present_vmUptime && that_present_vmUptime))
        return false;
      if (this.vmUptime != that.vmUptime)
        return false;
    }

    boolean this_present_loadAverage = true;
    boolean that_present_loadAverage = true;
    if (this_present_loadAverage || that_present_loadAverage) {
      if (!(this_present_loadAverage && that_present_loadAverage))
        return false;
      if (this.loadAverage != that.loadAverage)
        return false;
    }

    boolean this_present_freeMemory = true;
    boolean that_present_freeMemory = true;
    if (this_present_freeMemory || that_present_freeMemory) {
      if (!(this_present_freeMemory && that_present_freeMemory))
        return false;
      if (this.freeMemory != that.freeMemory)
        return false;
    }

    boolean this_present_usedMemory = true;
    boolean that_present_usedMemory = true;
    if (this_present_usedMemory || that_present_usedMemory) {
      if (!(this_present_usedMemory && that_present_usedMemory))
        return false;
      if (this.usedMemory != that.usedMemory)
        return false;
    }

    boolean this_present_activeThreads = true;
    boolean that_present_activeThreads = true;
    if (this_present_activeThreads || that_present_activeThreads) {
      if (!(this_present_activeThreads && that_present_activeThreads))
        return false;
      if (this.activeThreads != that.activeThreads)
        return false;
    }

    boolean this_present_activeTasks = true;
    boolean that_present_activeTasks = true;
    if (this_present_activeTasks || that_present_activeTasks) {
      if (!(this_present_activeTasks && that_present_activeTasks))
        return false;
      if (this.activeTasks != that.activeTasks)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.I64) {
            this.vmUptime = iprot.readI64();
            this.__isset.vmUptime = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.DOUBLE) {
            this.loadAverage = iprot.readDouble();
            this.__isset.loadAverage = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.I64) {
            this.freeMemory = iprot.readI64();
            this.__isset.freeMemory = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4:
          if (field.type == TType.I64) {
            this.usedMemory = iprot.readI64();
            this.__isset.usedMemory = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5:
          if (field.type == TType.I32) {
            this.activeThreads = iprot.readI32();
            this.__isset.activeThreads = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6:
          if (field.type == TType.I32) {
            this.activeTasks = iprot.readI32();
            this.__isset.activeTasks = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("HostState");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    field.name = "vmUptime";
    field.type = TType.I64;
    field.id = 1;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.vmUptime);
    oprot.writeFieldEnd();
    field.name = "loadAverage";
    field.type = TType.DOUBLE;
    field.id = 2;
    oprot.writeFieldBegin(field);
    oprot.writeDouble(this.loadAverage);
    oprot.writeFieldEnd();
    field.name = "freeMemory";
    field.type = TType.I64;
    field.id = 3;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.freeMemory);
    oprot.writeFieldEnd();
    field.name = "usedMemory";
    field.type = TType.I64;
    field.id = 4;
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.usedMemory);
    oprot.writeFieldEnd();
    field.name = "activeThreads";
    field.type = TType.I32;
    field.id = 5;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.activeThreads);
    oprot.writeFieldEnd();
    field.name = "activeTasks";
    field.type = TType.I32;
    field.id = 6;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.activeTasks);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("HostState(");
    sb.append("vmUptime:");
    sb.append(this.vmUptime);
    sb.append(",loadAverage:");
    sb.append(this.loadAverage);
    sb.append(",freeMemory:");
    sb.append(this.freeMemory);
    sb.append(",usedMemory:");
    sb.append(this.usedMemory);
    sb.append(",activeThreads:");
    sb.append(this.activeThreads);
    sb.append(",activeTasks:");
    sb.append(this.activeTasks);
    sb.append(")");
    return sb.toString();
  }

}

