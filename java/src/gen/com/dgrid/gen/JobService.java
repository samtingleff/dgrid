/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.dgrid.gen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class JobService {

  public interface Iface {

    public Host registerHost(String apiKey, String hostname) throws InvalidApiKey, TException;

    public Host getHost(String apiKey, String hostname) throws InvalidApiKey, InvalidHost, TException;

    public void setHostFacts(String apiKey, int hostid, Map<String,String> facts) throws InvalidApiKey, InvalidHost, TException;

    public String getSetting(String apiKey, String name, String defaultValue) throws InvalidApiKey, TException;

    public String getHostSetting(String apiKey, int hostid, String name, String defaultValue) throws InvalidApiKey, InvalidHost, TException;

    public Host getSyncJobServiceHost(String apiKey) throws InvalidApiKey, NoHostAvailable, TException;

    public int submitJob(String apiKey, Job job) throws InvalidApiKey, TException;

    public int submitJoblet(String apiKey, Joblet joblet, int jobId, int callbackType, String callbackAddress, String callbackContent) throws InvalidApiKey, InvalidJobId, TException;

    public Job getJob(String apiKey, int jobId) throws InvalidApiKey, InvalidJobId, TException;

    public JobletResult getJobletResult(String apiKey, int jobletId) throws InvalidApiKey, InvalidJobletId, TException;

    public List<JobletResult> getResults(String apiKey, int jobId) throws InvalidApiKey, InvalidJobId, TException;

    public Joblet getWork(String apiKey, int hostid) throws InvalidApiKey, NoWorkAvailable, InvalidHost, TException;

    public void completeJoblet(String apiKey, int hostid, int jobletId, JobletResult result, String logMessage) throws InvalidApiKey, InvalidJobletId, TException;

    public void releaseJoblet(String apiKey, int hostid, int jobletId) throws InvalidApiKey, InvalidJobletId, TException;

    public int getJobletQueueSize(String apiKey) throws InvalidApiKey, TException;

    public void log(String apiKey, int hostid, int jobletId, int status, String message) throws InvalidApiKey, InvalidJobletId, TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public Host registerHost(String apiKey, String hostname) throws InvalidApiKey, TException
    {
      send_registerHost(apiKey, hostname);
      return recv_registerHost();
    }

    public void send_registerHost(String apiKey, String hostname) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerHost", TMessageType.CALL, seqid_));
      registerHost_args args = new registerHost_args();
      args.apiKey = apiKey;
      args.hostname = hostname;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Host recv_registerHost() throws InvalidApiKey, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      registerHost_result result = new registerHost_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerHost failed: unknown result");
    }

    public Host getHost(String apiKey, String hostname) throws InvalidApiKey, InvalidHost, TException
    {
      send_getHost(apiKey, hostname);
      return recv_getHost();
    }

    public void send_getHost(String apiKey, String hostname) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getHost", TMessageType.CALL, seqid_));
      getHost_args args = new getHost_args();
      args.apiKey = apiKey;
      args.hostname = hostname;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Host recv_getHost() throws InvalidApiKey, InvalidHost, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getHost_result result = new getHost_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.hostException) {
        throw result.hostException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getHost failed: unknown result");
    }

    public void setHostFacts(String apiKey, int hostid, Map<String,String> facts) throws InvalidApiKey, InvalidHost, TException
    {
      send_setHostFacts(apiKey, hostid, facts);
      recv_setHostFacts();
    }

    public void send_setHostFacts(String apiKey, int hostid, Map<String,String> facts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setHostFacts", TMessageType.CALL, seqid_));
      setHostFacts_args args = new setHostFacts_args();
      args.apiKey = apiKey;
      args.hostid = hostid;
      args.facts = facts;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_setHostFacts() throws InvalidApiKey, InvalidHost, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      setHostFacts_result result = new setHostFacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.hostException) {
        throw result.hostException;
      }
      return;
    }

    public String getSetting(String apiKey, String name, String defaultValue) throws InvalidApiKey, TException
    {
      send_getSetting(apiKey, name, defaultValue);
      return recv_getSetting();
    }

    public void send_getSetting(String apiKey, String name, String defaultValue) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSetting", TMessageType.CALL, seqid_));
      getSetting_args args = new getSetting_args();
      args.apiKey = apiKey;
      args.name = name;
      args.defaultValue = defaultValue;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getSetting() throws InvalidApiKey, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getSetting_result result = new getSetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSetting failed: unknown result");
    }

    public String getHostSetting(String apiKey, int hostid, String name, String defaultValue) throws InvalidApiKey, InvalidHost, TException
    {
      send_getHostSetting(apiKey, hostid, name, defaultValue);
      return recv_getHostSetting();
    }

    public void send_getHostSetting(String apiKey, int hostid, String name, String defaultValue) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getHostSetting", TMessageType.CALL, seqid_));
      getHostSetting_args args = new getHostSetting_args();
      args.apiKey = apiKey;
      args.hostid = hostid;
      args.name = name;
      args.defaultValue = defaultValue;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getHostSetting() throws InvalidApiKey, InvalidHost, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getHostSetting_result result = new getHostSetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.hostException) {
        throw result.hostException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getHostSetting failed: unknown result");
    }

    public Host getSyncJobServiceHost(String apiKey) throws InvalidApiKey, NoHostAvailable, TException
    {
      send_getSyncJobServiceHost(apiKey);
      return recv_getSyncJobServiceHost();
    }

    public void send_getSyncJobServiceHost(String apiKey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSyncJobServiceHost", TMessageType.CALL, seqid_));
      getSyncJobServiceHost_args args = new getSyncJobServiceHost_args();
      args.apiKey = apiKey;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Host recv_getSyncJobServiceHost() throws InvalidApiKey, NoHostAvailable, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getSyncJobServiceHost_result result = new getSyncJobServiceHost_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.hostException) {
        throw result.hostException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSyncJobServiceHost failed: unknown result");
    }

    public int submitJob(String apiKey, Job job) throws InvalidApiKey, TException
    {
      send_submitJob(apiKey, job);
      return recv_submitJob();
    }

    public void send_submitJob(String apiKey, Job job) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("submitJob", TMessageType.CALL, seqid_));
      submitJob_args args = new submitJob_args();
      args.apiKey = apiKey;
      args.job = job;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_submitJob() throws InvalidApiKey, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      submitJob_result result = new submitJob_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "submitJob failed: unknown result");
    }

    public int submitJoblet(String apiKey, Joblet joblet, int jobId, int callbackType, String callbackAddress, String callbackContent) throws InvalidApiKey, InvalidJobId, TException
    {
      send_submitJoblet(apiKey, joblet, jobId, callbackType, callbackAddress, callbackContent);
      return recv_submitJoblet();
    }

    public void send_submitJoblet(String apiKey, Joblet joblet, int jobId, int callbackType, String callbackAddress, String callbackContent) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("submitJoblet", TMessageType.CALL, seqid_));
      submitJoblet_args args = new submitJoblet_args();
      args.apiKey = apiKey;
      args.joblet = joblet;
      args.jobId = jobId;
      args.callbackType = callbackType;
      args.callbackAddress = callbackAddress;
      args.callbackContent = callbackContent;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_submitJoblet() throws InvalidApiKey, InvalidJobId, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      submitJoblet_result result = new submitJoblet_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.jobIdException) {
        throw result.jobIdException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "submitJoblet failed: unknown result");
    }

    public Job getJob(String apiKey, int jobId) throws InvalidApiKey, InvalidJobId, TException
    {
      send_getJob(apiKey, jobId);
      return recv_getJob();
    }

    public void send_getJob(String apiKey, int jobId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getJob", TMessageType.CALL, seqid_));
      getJob_args args = new getJob_args();
      args.apiKey = apiKey;
      args.jobId = jobId;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Job recv_getJob() throws InvalidApiKey, InvalidJobId, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getJob_result result = new getJob_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.jobIdException) {
        throw result.jobIdException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getJob failed: unknown result");
    }

    public JobletResult getJobletResult(String apiKey, int jobletId) throws InvalidApiKey, InvalidJobletId, TException
    {
      send_getJobletResult(apiKey, jobletId);
      return recv_getJobletResult();
    }

    public void send_getJobletResult(String apiKey, int jobletId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getJobletResult", TMessageType.CALL, seqid_));
      getJobletResult_args args = new getJobletResult_args();
      args.apiKey = apiKey;
      args.jobletId = jobletId;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public JobletResult recv_getJobletResult() throws InvalidApiKey, InvalidJobletId, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getJobletResult_result result = new getJobletResult_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.jobletIdException) {
        throw result.jobletIdException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getJobletResult failed: unknown result");
    }

    public List<JobletResult> getResults(String apiKey, int jobId) throws InvalidApiKey, InvalidJobId, TException
    {
      send_getResults(apiKey, jobId);
      return recv_getResults();
    }

    public void send_getResults(String apiKey, int jobId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getResults", TMessageType.CALL, seqid_));
      getResults_args args = new getResults_args();
      args.apiKey = apiKey;
      args.jobId = jobId;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public List<JobletResult> recv_getResults() throws InvalidApiKey, InvalidJobId, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getResults_result result = new getResults_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.jobletIdException) {
        throw result.jobletIdException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getResults failed: unknown result");
    }

    public Joblet getWork(String apiKey, int hostid) throws InvalidApiKey, NoWorkAvailable, InvalidHost, TException
    {
      send_getWork(apiKey, hostid);
      return recv_getWork();
    }

    public void send_getWork(String apiKey, int hostid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getWork", TMessageType.CALL, seqid_));
      getWork_args args = new getWork_args();
      args.apiKey = apiKey;
      args.hostid = hostid;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Joblet recv_getWork() throws InvalidApiKey, NoWorkAvailable, InvalidHost, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getWork_result result = new getWork_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.noWorkException) {
        throw result.noWorkException;
      }
      if (result.__isset.invalidHostException) {
        throw result.invalidHostException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getWork failed: unknown result");
    }

    public void completeJoblet(String apiKey, int hostid, int jobletId, JobletResult result, String logMessage) throws InvalidApiKey, InvalidJobletId, TException
    {
      send_completeJoblet(apiKey, hostid, jobletId, result, logMessage);
      recv_completeJoblet();
    }

    public void send_completeJoblet(String apiKey, int hostid, int jobletId, JobletResult result, String logMessage) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("completeJoblet", TMessageType.CALL, seqid_));
      completeJoblet_args args = new completeJoblet_args();
      args.apiKey = apiKey;
      args.hostid = hostid;
      args.jobletId = jobletId;
      args.result = result;
      args.logMessage = logMessage;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_completeJoblet() throws InvalidApiKey, InvalidJobletId, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      completeJoblet_result result = new completeJoblet_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.jobletIdException) {
        throw result.jobletIdException;
      }
      return;
    }

    public void releaseJoblet(String apiKey, int hostid, int jobletId) throws InvalidApiKey, InvalidJobletId, TException
    {
      send_releaseJoblet(apiKey, hostid, jobletId);
      recv_releaseJoblet();
    }

    public void send_releaseJoblet(String apiKey, int hostid, int jobletId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("releaseJoblet", TMessageType.CALL, seqid_));
      releaseJoblet_args args = new releaseJoblet_args();
      args.apiKey = apiKey;
      args.hostid = hostid;
      args.jobletId = jobletId;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_releaseJoblet() throws InvalidApiKey, InvalidJobletId, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      releaseJoblet_result result = new releaseJoblet_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.jobletIdException) {
        throw result.jobletIdException;
      }
      return;
    }

    public int getJobletQueueSize(String apiKey) throws InvalidApiKey, TException
    {
      send_getJobletQueueSize(apiKey);
      return recv_getJobletQueueSize();
    }

    public void send_getJobletQueueSize(String apiKey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getJobletQueueSize", TMessageType.CALL, seqid_));
      getJobletQueueSize_args args = new getJobletQueueSize_args();
      args.apiKey = apiKey;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_getJobletQueueSize() throws InvalidApiKey, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      getJobletQueueSize_result result = new getJobletQueueSize_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getJobletQueueSize failed: unknown result");
    }

    public void log(String apiKey, int hostid, int jobletId, int status, String message) throws InvalidApiKey, InvalidJobletId, TException
    {
      send_log(apiKey, hostid, jobletId, status, message);
      recv_log();
    }

    public void send_log(String apiKey, int hostid, int jobletId, int status, String message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("log", TMessageType.CALL, seqid_));
      log_args args = new log_args();
      args.apiKey = apiKey;
      args.hostid = hostid;
      args.jobletId = jobletId;
      args.status = status;
      args.message = message;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_log() throws InvalidApiKey, InvalidJobletId, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      log_result result = new log_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.apiKeyException) {
        throw result.apiKeyException;
      }
      if (result.__isset.jobletIdException) {
        throw result.jobletIdException;
      }
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("registerHost", new registerHost());
      processMap_.put("getHost", new getHost());
      processMap_.put("setHostFacts", new setHostFacts());
      processMap_.put("getSetting", new getSetting());
      processMap_.put("getHostSetting", new getHostSetting());
      processMap_.put("getSyncJobServiceHost", new getSyncJobServiceHost());
      processMap_.put("submitJob", new submitJob());
      processMap_.put("submitJoblet", new submitJoblet());
      processMap_.put("getJob", new getJob());
      processMap_.put("getJobletResult", new getJobletResult());
      processMap_.put("getResults", new getResults());
      processMap_.put("getWork", new getWork());
      processMap_.put("completeJoblet", new completeJoblet());
      processMap_.put("releaseJoblet", new releaseJoblet());
      processMap_.put("getJobletQueueSize", new getJobletQueueSize());
      processMap_.put("log", new log());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class registerHost implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerHost_args args = new registerHost_args();
        args.read(iprot);
        iprot.readMessageEnd();
        registerHost_result result = new registerHost_result();
        try {
          result.success = iface_.registerHost(args.apiKey, args.hostname);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        }
        oprot.writeMessageBegin(new TMessage("registerHost", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getHost implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getHost_args args = new getHost_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getHost_result result = new getHost_result();
        try {
          result.success = iface_.getHost(args.apiKey, args.hostname);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidHost hostException) {
          result.hostException = hostException;
          result.__isset.hostException = true;
        }
        oprot.writeMessageBegin(new TMessage("getHost", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setHostFacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setHostFacts_args args = new setHostFacts_args();
        args.read(iprot);
        iprot.readMessageEnd();
        setHostFacts_result result = new setHostFacts_result();
        try {
          iface_.setHostFacts(args.apiKey, args.hostid, args.facts);
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidHost hostException) {
          result.hostException = hostException;
          result.__isset.hostException = true;
        }
        oprot.writeMessageBegin(new TMessage("setHostFacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSetting implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSetting_args args = new getSetting_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getSetting_result result = new getSetting_result();
        try {
          result.success = iface_.getSetting(args.apiKey, args.name, args.defaultValue);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        }
        oprot.writeMessageBegin(new TMessage("getSetting", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getHostSetting implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getHostSetting_args args = new getHostSetting_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getHostSetting_result result = new getHostSetting_result();
        try {
          result.success = iface_.getHostSetting(args.apiKey, args.hostid, args.name, args.defaultValue);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidHost hostException) {
          result.hostException = hostException;
          result.__isset.hostException = true;
        }
        oprot.writeMessageBegin(new TMessage("getHostSetting", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSyncJobServiceHost implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSyncJobServiceHost_args args = new getSyncJobServiceHost_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getSyncJobServiceHost_result result = new getSyncJobServiceHost_result();
        try {
          result.success = iface_.getSyncJobServiceHost(args.apiKey);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (NoHostAvailable hostException) {
          result.hostException = hostException;
          result.__isset.hostException = true;
        }
        oprot.writeMessageBegin(new TMessage("getSyncJobServiceHost", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class submitJob implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        submitJob_args args = new submitJob_args();
        args.read(iprot);
        iprot.readMessageEnd();
        submitJob_result result = new submitJob_result();
        try {
          result.success = iface_.submitJob(args.apiKey, args.job);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        }
        oprot.writeMessageBegin(new TMessage("submitJob", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class submitJoblet implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        submitJoblet_args args = new submitJoblet_args();
        args.read(iprot);
        iprot.readMessageEnd();
        submitJoblet_result result = new submitJoblet_result();
        try {
          result.success = iface_.submitJoblet(args.apiKey, args.joblet, args.jobId, args.callbackType, args.callbackAddress, args.callbackContent);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidJobId jobIdException) {
          result.jobIdException = jobIdException;
          result.__isset.jobIdException = true;
        }
        oprot.writeMessageBegin(new TMessage("submitJoblet", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getJob implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getJob_args args = new getJob_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getJob_result result = new getJob_result();
        try {
          result.success = iface_.getJob(args.apiKey, args.jobId);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidJobId jobIdException) {
          result.jobIdException = jobIdException;
          result.__isset.jobIdException = true;
        }
        oprot.writeMessageBegin(new TMessage("getJob", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getJobletResult implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getJobletResult_args args = new getJobletResult_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getJobletResult_result result = new getJobletResult_result();
        try {
          result.success = iface_.getJobletResult(args.apiKey, args.jobletId);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidJobletId jobletIdException) {
          result.jobletIdException = jobletIdException;
          result.__isset.jobletIdException = true;
        }
        oprot.writeMessageBegin(new TMessage("getJobletResult", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getResults implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getResults_args args = new getResults_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getResults_result result = new getResults_result();
        try {
          result.success = iface_.getResults(args.apiKey, args.jobId);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidJobId jobletIdException) {
          result.jobletIdException = jobletIdException;
          result.__isset.jobletIdException = true;
        }
        oprot.writeMessageBegin(new TMessage("getResults", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getWork implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getWork_args args = new getWork_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getWork_result result = new getWork_result();
        try {
          result.success = iface_.getWork(args.apiKey, args.hostid);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (NoWorkAvailable noWorkException) {
          result.noWorkException = noWorkException;
          result.__isset.noWorkException = true;
        } catch (InvalidHost invalidHostException) {
          result.invalidHostException = invalidHostException;
          result.__isset.invalidHostException = true;
        }
        oprot.writeMessageBegin(new TMessage("getWork", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class completeJoblet implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        completeJoblet_args args = new completeJoblet_args();
        args.read(iprot);
        iprot.readMessageEnd();
        completeJoblet_result result = new completeJoblet_result();
        try {
          iface_.completeJoblet(args.apiKey, args.hostid, args.jobletId, args.result, args.logMessage);
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidJobletId jobletIdException) {
          result.jobletIdException = jobletIdException;
          result.__isset.jobletIdException = true;
        }
        oprot.writeMessageBegin(new TMessage("completeJoblet", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class releaseJoblet implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        releaseJoblet_args args = new releaseJoblet_args();
        args.read(iprot);
        iprot.readMessageEnd();
        releaseJoblet_result result = new releaseJoblet_result();
        try {
          iface_.releaseJoblet(args.apiKey, args.hostid, args.jobletId);
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidJobletId jobletIdException) {
          result.jobletIdException = jobletIdException;
          result.__isset.jobletIdException = true;
        }
        oprot.writeMessageBegin(new TMessage("releaseJoblet", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getJobletQueueSize implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getJobletQueueSize_args args = new getJobletQueueSize_args();
        args.read(iprot);
        iprot.readMessageEnd();
        getJobletQueueSize_result result = new getJobletQueueSize_result();
        try {
          result.success = iface_.getJobletQueueSize(args.apiKey);
          result.__isset.success = true;
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        }
        oprot.writeMessageBegin(new TMessage("getJobletQueueSize", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class log implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        log_args args = new log_args();
        args.read(iprot);
        iprot.readMessageEnd();
        log_result result = new log_result();
        try {
          iface_.log(args.apiKey, args.hostid, args.jobletId, args.status, args.message);
        } catch (InvalidApiKey apiKeyException) {
          result.apiKeyException = apiKeyException;
          result.__isset.apiKeyException = true;
        } catch (InvalidJobletId jobletIdException) {
          result.jobletIdException = jobletIdException;
          result.__isset.jobletIdException = true;
        }
        oprot.writeMessageBegin(new TMessage("log", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class registerHost_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private String hostname;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean hostname = false;
    }

    public registerHost_args() {
    }

    public registerHost_args(
      String apiKey,
      String hostname)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.hostname = hostname;
      this.__isset.hostname = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public String getHostname() {
      return this.hostname;
    }

    public void setHostname(String hostname) {
      this.hostname = hostname;
      this.__isset.hostname = true;
    }

    public void unsetHostname() {
      this.__isset.hostname = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerHost_args)
        return this.equals((registerHost_args)that);
      return false;
    }

    public boolean equals(registerHost_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_hostname = true && (this.hostname != null);
      boolean that_present_hostname = true && (that.hostname != null);
      if (this_present_hostname || that_present_hostname) {
        if (!(this_present_hostname && that_present_hostname))
          return false;
        if (!this.hostname.equals(that.hostname))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRING) {
              this.hostname = iprot.readString();
              this.__isset.hostname = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("registerHost_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      if (this.hostname != null) {
        field.name = "hostname";
        field.type = TType.STRING;
        field.id = 2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.hostname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("registerHost_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",hostname:");
      sb.append(this.hostname);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class registerHost_result implements TBase, java.io.Serializable   {
    private Host success;
    private InvalidApiKey apiKeyException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
    }

    public registerHost_result() {
    }

    public registerHost_result(
      Host success,
      InvalidApiKey apiKeyException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public Host getSuccess() {
      return this.success;
    }

    public void setSuccess(Host success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerHost_result)
        return this.equals((registerHost_result)that);
      return false;
    }

    public boolean equals(registerHost_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new Host();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("registerHost_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("registerHost_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getHost_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private String hostname;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean hostname = false;
    }

    public getHost_args() {
    }

    public getHost_args(
      String apiKey,
      String hostname)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.hostname = hostname;
      this.__isset.hostname = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public String getHostname() {
      return this.hostname;
    }

    public void setHostname(String hostname) {
      this.hostname = hostname;
      this.__isset.hostname = true;
    }

    public void unsetHostname() {
      this.__isset.hostname = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHost_args)
        return this.equals((getHost_args)that);
      return false;
    }

    public boolean equals(getHost_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_hostname = true && (this.hostname != null);
      boolean that_present_hostname = true && (that.hostname != null);
      if (this_present_hostname || that_present_hostname) {
        if (!(this_present_hostname && that_present_hostname))
          return false;
        if (!this.hostname.equals(that.hostname))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRING) {
              this.hostname = iprot.readString();
              this.__isset.hostname = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getHost_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      if (this.hostname != null) {
        field.name = "hostname";
        field.type = TType.STRING;
        field.id = 2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.hostname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getHost_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",hostname:");
      sb.append(this.hostname);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getHost_result implements TBase, java.io.Serializable   {
    private Host success;
    private InvalidApiKey apiKeyException;
    private InvalidHost hostException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
      public boolean hostException = false;
    }

    public getHost_result() {
    }

    public getHost_result(
      Host success,
      InvalidApiKey apiKeyException,
      InvalidHost hostException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.hostException = hostException;
      this.__isset.hostException = true;
    }

    public Host getSuccess() {
      return this.success;
    }

    public void setSuccess(Host success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidHost getHostException() {
      return this.hostException;
    }

    public void setHostException(InvalidHost hostException) {
      this.hostException = hostException;
      this.__isset.hostException = true;
    }

    public void unsetHostException() {
      this.hostException = null;
      this.__isset.hostException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHost_result)
        return this.equals((getHost_result)that);
      return false;
    }

    public boolean equals(getHost_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_hostException = true && (this.hostException != null);
      boolean that_present_hostException = true && (that.hostException != null);
      if (this_present_hostException || that_present_hostException) {
        if (!(this_present_hostException && that_present_hostException))
          return false;
        if (!this.hostException.equals(that.hostException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new Host();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.hostException = new InvalidHost();
              this.hostException.read(iprot);
              this.__isset.hostException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getHost_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.hostException) {
        if (this.hostException != null) {
          field.name = "hostException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.hostException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getHost_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",hostException:");
      sb.append(this.hostException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class setHostFacts_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private int hostid;
    private Map<String,String> facts;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean hostid = false;
      public boolean facts = false;
    }

    public setHostFacts_args() {
    }

    public setHostFacts_args(
      String apiKey,
      int hostid,
      Map<String,String> facts)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.hostid = hostid;
      this.__isset.hostid = true;
      this.facts = facts;
      this.__isset.facts = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public int getHostid() {
      return this.hostid;
    }

    public void setHostid(int hostid) {
      this.hostid = hostid;
      this.__isset.hostid = true;
    }

    public void unsetHostid() {
      this.__isset.hostid = false;
    }

    public int getFactsSize() {
      return (this.facts == null) ? 0 : this.facts.size();
    }

    public void putToFacts(String key, String val) {
      if (this.facts == null) {
        this.facts = new HashMap<String,String>();
      }
      this.facts.put(key, val);
      this.__isset.facts = true;
    }

    public Map<String,String> getFacts() {
      return this.facts;
    }

    public void setFacts(Map<String,String> facts) {
      this.facts = facts;
      this.__isset.facts = true;
    }

    public void unsetFacts() {
      this.facts = null;
      this.__isset.facts = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setHostFacts_args)
        return this.equals((setHostFacts_args)that);
      return false;
    }

    public boolean equals(setHostFacts_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_hostid = true;
      boolean that_present_hostid = true;
      if (this_present_hostid || that_present_hostid) {
        if (!(this_present_hostid && that_present_hostid))
          return false;
        if (this.hostid != that.hostid)
          return false;
      }

      boolean this_present_facts = true && (this.facts != null);
      boolean that_present_facts = true && (that.facts != null);
      if (this_present_facts || that_present_facts) {
        if (!(this_present_facts && that_present_facts))
          return false;
        if (!this.facts.equals(that.facts))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.I32) {
              this.hostid = iprot.readI32();
              this.__isset.hostid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.MAP) {
              {
                TMap _map14 = iprot.readMapBegin();
                this.facts = new HashMap<String,String>(2*_map14.size);
                for (int _i15 = 0; _i15 < _map14.size; ++_i15)
                {
                  String _key16;
                  String _val17;
                  _key16 = iprot.readString();
                  _val17 = iprot.readString();
                  this.facts.put(_key16, _val17);
                }
                iprot.readMapEnd();
              }
              this.__isset.facts = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("setHostFacts_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      field.name = "hostid";
      field.type = TType.I32;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.hostid);
      oprot.writeFieldEnd();
      if (this.facts != null) {
        field.name = "facts";
        field.type = TType.MAP;
        field.id = 3;
        oprot.writeFieldBegin(field);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.facts.size()));
          for (String _iter18 : this.facts.keySet())          {
            oprot.writeString(_iter18);
            oprot.writeString(this.facts.get(_iter18));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("setHostFacts_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",hostid:");
      sb.append(this.hostid);
      sb.append(",facts:");
      sb.append(this.facts);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class setHostFacts_result implements TBase, java.io.Serializable   {
    private InvalidApiKey apiKeyException;
    private InvalidHost hostException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKeyException = false;
      public boolean hostException = false;
    }

    public setHostFacts_result() {
    }

    public setHostFacts_result(
      InvalidApiKey apiKeyException,
      InvalidHost hostException)
    {
      this();
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.hostException = hostException;
      this.__isset.hostException = true;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidHost getHostException() {
      return this.hostException;
    }

    public void setHostException(InvalidHost hostException) {
      this.hostException = hostException;
      this.__isset.hostException = true;
    }

    public void unsetHostException() {
      this.hostException = null;
      this.__isset.hostException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setHostFacts_result)
        return this.equals((setHostFacts_result)that);
      return false;
    }

    public boolean equals(setHostFacts_result that) {
      if (that == null)
        return false;

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_hostException = true && (this.hostException != null);
      boolean that_present_hostException = true && (that.hostException != null);
      if (this_present_hostException || that_present_hostException) {
        if (!(this_present_hostException && that_present_hostException))
          return false;
        if (!this.hostException.equals(that.hostException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.hostException = new InvalidHost();
              this.hostException.read(iprot);
              this.__isset.hostException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("setHostFacts_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.hostException) {
        if (this.hostException != null) {
          field.name = "hostException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.hostException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("setHostFacts_result(");
      sb.append("apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",hostException:");
      sb.append(this.hostException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getSetting_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private String name;
    private String defaultValue;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean name = false;
      public boolean defaultValue = false;
    }

    public getSetting_args() {
    }

    public getSetting_args(
      String apiKey,
      String name,
      String defaultValue)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.name = name;
      this.__isset.name = true;
      this.defaultValue = defaultValue;
      this.__isset.defaultValue = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
      this.__isset.name = true;
    }

    public void unsetName() {
      this.__isset.name = false;
    }

    public String getDefaultValue() {
      return this.defaultValue;
    }

    public void setDefaultValue(String defaultValue) {
      this.defaultValue = defaultValue;
      this.__isset.defaultValue = true;
    }

    public void unsetDefaultValue() {
      this.__isset.defaultValue = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSetting_args)
        return this.equals((getSetting_args)that);
      return false;
    }

    public boolean equals(getSetting_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_defaultValue = true && (this.defaultValue != null);
      boolean that_present_defaultValue = true && (that.defaultValue != null);
      if (this_present_defaultValue || that_present_defaultValue) {
        if (!(this_present_defaultValue && that_present_defaultValue))
          return false;
        if (!this.defaultValue.equals(that.defaultValue))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.STRING) {
              this.defaultValue = iprot.readString();
              this.__isset.defaultValue = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getSetting_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = 2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.defaultValue != null) {
        field.name = "defaultValue";
        field.type = TType.STRING;
        field.id = 3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.defaultValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSetting_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",name:");
      sb.append(this.name);
      sb.append(",defaultValue:");
      sb.append(this.defaultValue);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getSetting_result implements TBase, java.io.Serializable   {
    private String success;
    private InvalidApiKey apiKeyException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
    }

    public getSetting_result() {
    }

    public getSetting_result(
      String success,
      InvalidApiKey apiKeyException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSetting_result)
        return this.equals((getSetting_result)that);
      return false;
    }

    public boolean equals(getSetting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getSetting_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRING;
          field.id = 0;
          oprot.writeFieldBegin(field);
          oprot.writeString(this.success);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSetting_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getHostSetting_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private int hostid;
    private String name;
    private String defaultValue;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean hostid = false;
      public boolean name = false;
      public boolean defaultValue = false;
    }

    public getHostSetting_args() {
    }

    public getHostSetting_args(
      String apiKey,
      int hostid,
      String name,
      String defaultValue)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.hostid = hostid;
      this.__isset.hostid = true;
      this.name = name;
      this.__isset.name = true;
      this.defaultValue = defaultValue;
      this.__isset.defaultValue = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public int getHostid() {
      return this.hostid;
    }

    public void setHostid(int hostid) {
      this.hostid = hostid;
      this.__isset.hostid = true;
    }

    public void unsetHostid() {
      this.__isset.hostid = false;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
      this.__isset.name = true;
    }

    public void unsetName() {
      this.__isset.name = false;
    }

    public String getDefaultValue() {
      return this.defaultValue;
    }

    public void setDefaultValue(String defaultValue) {
      this.defaultValue = defaultValue;
      this.__isset.defaultValue = true;
    }

    public void unsetDefaultValue() {
      this.__isset.defaultValue = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostSetting_args)
        return this.equals((getHostSetting_args)that);
      return false;
    }

    public boolean equals(getHostSetting_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_hostid = true;
      boolean that_present_hostid = true;
      if (this_present_hostid || that_present_hostid) {
        if (!(this_present_hostid && that_present_hostid))
          return false;
        if (this.hostid != that.hostid)
          return false;
      }

      boolean this_present_name = true && (this.name != null);
      boolean that_present_name = true && (that.name != null);
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_defaultValue = true && (this.defaultValue != null);
      boolean that_present_defaultValue = true && (that.defaultValue != null);
      if (this_present_defaultValue || that_present_defaultValue) {
        if (!(this_present_defaultValue && that_present_defaultValue))
          return false;
        if (!this.defaultValue.equals(that.defaultValue))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.I32) {
              this.hostid = iprot.readI32();
              this.__isset.hostid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
              this.__isset.name = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4:
            if (field.type == TType.STRING) {
              this.defaultValue = iprot.readString();
              this.__isset.defaultValue = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getHostSetting_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      field.name = "hostid";
      field.type = TType.I32;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.hostid);
      oprot.writeFieldEnd();
      if (this.name != null) {
        field.name = "name";
        field.type = TType.STRING;
        field.id = 3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.defaultValue != null) {
        field.name = "defaultValue";
        field.type = TType.STRING;
        field.id = 4;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.defaultValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getHostSetting_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",hostid:");
      sb.append(this.hostid);
      sb.append(",name:");
      sb.append(this.name);
      sb.append(",defaultValue:");
      sb.append(this.defaultValue);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getHostSetting_result implements TBase, java.io.Serializable   {
    private String success;
    private InvalidApiKey apiKeyException;
    private InvalidHost hostException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
      public boolean hostException = false;
    }

    public getHostSetting_result() {
    }

    public getHostSetting_result(
      String success,
      InvalidApiKey apiKeyException,
      InvalidHost hostException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.hostException = hostException;
      this.__isset.hostException = true;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidHost getHostException() {
      return this.hostException;
    }

    public void setHostException(InvalidHost hostException) {
      this.hostException = hostException;
      this.__isset.hostException = true;
    }

    public void unsetHostException() {
      this.hostException = null;
      this.__isset.hostException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHostSetting_result)
        return this.equals((getHostSetting_result)that);
      return false;
    }

    public boolean equals(getHostSetting_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_hostException = true && (this.hostException != null);
      boolean that_present_hostException = true && (that.hostException != null);
      if (this_present_hostException || that_present_hostException) {
        if (!(this_present_hostException && that_present_hostException))
          return false;
        if (!this.hostException.equals(that.hostException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.hostException = new InvalidHost();
              this.hostException.read(iprot);
              this.__isset.hostException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getHostSetting_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRING;
          field.id = 0;
          oprot.writeFieldBegin(field);
          oprot.writeString(this.success);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.hostException) {
        if (this.hostException != null) {
          field.name = "hostException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.hostException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getHostSetting_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",hostException:");
      sb.append(this.hostException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getSyncJobServiceHost_args implements TBase, java.io.Serializable   {
    private String apiKey;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
    }

    public getSyncJobServiceHost_args() {
    }

    public getSyncJobServiceHost_args(
      String apiKey)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncJobServiceHost_args)
        return this.equals((getSyncJobServiceHost_args)that);
      return false;
    }

    public boolean equals(getSyncJobServiceHost_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getSyncJobServiceHost_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSyncJobServiceHost_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getSyncJobServiceHost_result implements TBase, java.io.Serializable   {
    private Host success;
    private InvalidApiKey apiKeyException;
    private NoHostAvailable hostException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
      public boolean hostException = false;
    }

    public getSyncJobServiceHost_result() {
    }

    public getSyncJobServiceHost_result(
      Host success,
      InvalidApiKey apiKeyException,
      NoHostAvailable hostException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.hostException = hostException;
      this.__isset.hostException = true;
    }

    public Host getSuccess() {
      return this.success;
    }

    public void setSuccess(Host success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public NoHostAvailable getHostException() {
      return this.hostException;
    }

    public void setHostException(NoHostAvailable hostException) {
      this.hostException = hostException;
      this.__isset.hostException = true;
    }

    public void unsetHostException() {
      this.hostException = null;
      this.__isset.hostException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSyncJobServiceHost_result)
        return this.equals((getSyncJobServiceHost_result)that);
      return false;
    }

    public boolean equals(getSyncJobServiceHost_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_hostException = true && (this.hostException != null);
      boolean that_present_hostException = true && (that.hostException != null);
      if (this_present_hostException || that_present_hostException) {
        if (!(this_present_hostException && that_present_hostException))
          return false;
        if (!this.hostException.equals(that.hostException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new Host();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.hostException = new NoHostAvailable();
              this.hostException.read(iprot);
              this.__isset.hostException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getSyncJobServiceHost_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.hostException) {
        if (this.hostException != null) {
          field.name = "hostException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.hostException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getSyncJobServiceHost_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",hostException:");
      sb.append(this.hostException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class submitJob_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private Job job;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean job = false;
    }

    public submitJob_args() {
    }

    public submitJob_args(
      String apiKey,
      Job job)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.job = job;
      this.__isset.job = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public Job getJob() {
      return this.job;
    }

    public void setJob(Job job) {
      this.job = job;
      this.__isset.job = true;
    }

    public void unsetJob() {
      this.job = null;
      this.__isset.job = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJob_args)
        return this.equals((submitJob_args)that);
      return false;
    }

    public boolean equals(submitJob_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_job = true && (this.job != null);
      boolean that_present_job = true && (that.job != null);
      if (this_present_job || that_present_job) {
        if (!(this_present_job && that_present_job))
          return false;
        if (!this.job.equals(that.job))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.job = new Job();
              this.job.read(iprot);
              this.__isset.job = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("submitJob_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      if (this.job != null) {
        field.name = "job";
        field.type = TType.STRUCT;
        field.id = 2;
        oprot.writeFieldBegin(field);
        this.job.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("submitJob_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",job:");
      sb.append(this.job);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class submitJob_result implements TBase, java.io.Serializable   {
    private int success;
    private InvalidApiKey apiKeyException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
    }

    public submitJob_result() {
    }

    public submitJob_result(
      int success,
      InvalidApiKey apiKeyException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJob_result)
        return this.equals((submitJob_result)that);
      return false;
    }

    public boolean equals(submitJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("submitJob_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I32;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("submitJob_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class submitJoblet_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private Joblet joblet;
    private int jobId;
    private int callbackType;
    private String callbackAddress;
    private String callbackContent;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean joblet = false;
      public boolean jobId = false;
      public boolean callbackType = false;
      public boolean callbackAddress = false;
      public boolean callbackContent = false;
    }

    public submitJoblet_args() {
    }

    public submitJoblet_args(
      String apiKey,
      Joblet joblet,
      int jobId,
      int callbackType,
      String callbackAddress,
      String callbackContent)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.joblet = joblet;
      this.__isset.joblet = true;
      this.jobId = jobId;
      this.__isset.jobId = true;
      this.callbackType = callbackType;
      this.__isset.callbackType = true;
      this.callbackAddress = callbackAddress;
      this.__isset.callbackAddress = true;
      this.callbackContent = callbackContent;
      this.__isset.callbackContent = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public Joblet getJoblet() {
      return this.joblet;
    }

    public void setJoblet(Joblet joblet) {
      this.joblet = joblet;
      this.__isset.joblet = true;
    }

    public void unsetJoblet() {
      this.joblet = null;
      this.__isset.joblet = false;
    }

    public int getJobId() {
      return this.jobId;
    }

    public void setJobId(int jobId) {
      this.jobId = jobId;
      this.__isset.jobId = true;
    }

    public void unsetJobId() {
      this.__isset.jobId = false;
    }

    public int getCallbackType() {
      return this.callbackType;
    }

    public void setCallbackType(int callbackType) {
      this.callbackType = callbackType;
      this.__isset.callbackType = true;
    }

    public void unsetCallbackType() {
      this.__isset.callbackType = false;
    }

    public String getCallbackAddress() {
      return this.callbackAddress;
    }

    public void setCallbackAddress(String callbackAddress) {
      this.callbackAddress = callbackAddress;
      this.__isset.callbackAddress = true;
    }

    public void unsetCallbackAddress() {
      this.__isset.callbackAddress = false;
    }

    public String getCallbackContent() {
      return this.callbackContent;
    }

    public void setCallbackContent(String callbackContent) {
      this.callbackContent = callbackContent;
      this.__isset.callbackContent = true;
    }

    public void unsetCallbackContent() {
      this.__isset.callbackContent = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJoblet_args)
        return this.equals((submitJoblet_args)that);
      return false;
    }

    public boolean equals(submitJoblet_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_joblet = true && (this.joblet != null);
      boolean that_present_joblet = true && (that.joblet != null);
      if (this_present_joblet || that_present_joblet) {
        if (!(this_present_joblet && that_present_joblet))
          return false;
        if (!this.joblet.equals(that.joblet))
          return false;
      }

      boolean this_present_jobId = true;
      boolean that_present_jobId = true;
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (this.jobId != that.jobId)
          return false;
      }

      boolean this_present_callbackType = true;
      boolean that_present_callbackType = true;
      if (this_present_callbackType || that_present_callbackType) {
        if (!(this_present_callbackType && that_present_callbackType))
          return false;
        if (this.callbackType != that.callbackType)
          return false;
      }

      boolean this_present_callbackAddress = true && (this.callbackAddress != null);
      boolean that_present_callbackAddress = true && (that.callbackAddress != null);
      if (this_present_callbackAddress || that_present_callbackAddress) {
        if (!(this_present_callbackAddress && that_present_callbackAddress))
          return false;
        if (!this.callbackAddress.equals(that.callbackAddress))
          return false;
      }

      boolean this_present_callbackContent = true && (this.callbackContent != null);
      boolean that_present_callbackContent = true && (that.callbackContent != null);
      if (this_present_callbackContent || that_present_callbackContent) {
        if (!(this_present_callbackContent && that_present_callbackContent))
          return false;
        if (!this.callbackContent.equals(that.callbackContent))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.joblet = new Joblet();
              this.joblet.read(iprot);
              this.__isset.joblet = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.I32) {
              this.jobId = iprot.readI32();
              this.__isset.jobId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4:
            if (field.type == TType.I32) {
              this.callbackType = iprot.readI32();
              this.__isset.callbackType = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5:
            if (field.type == TType.STRING) {
              this.callbackAddress = iprot.readString();
              this.__isset.callbackAddress = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6:
            if (field.type == TType.STRING) {
              this.callbackContent = iprot.readString();
              this.__isset.callbackContent = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("submitJoblet_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      if (this.joblet != null) {
        field.name = "joblet";
        field.type = TType.STRUCT;
        field.id = 2;
        oprot.writeFieldBegin(field);
        this.joblet.write(oprot);
        oprot.writeFieldEnd();
      }
      field.name = "jobId";
      field.type = TType.I32;
      field.id = 3;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.jobId);
      oprot.writeFieldEnd();
      field.name = "callbackType";
      field.type = TType.I32;
      field.id = 4;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.callbackType);
      oprot.writeFieldEnd();
      if (this.callbackAddress != null) {
        field.name = "callbackAddress";
        field.type = TType.STRING;
        field.id = 5;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.callbackAddress);
        oprot.writeFieldEnd();
      }
      if (this.callbackContent != null) {
        field.name = "callbackContent";
        field.type = TType.STRING;
        field.id = 6;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.callbackContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("submitJoblet_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",joblet:");
      sb.append(this.joblet);
      sb.append(",jobId:");
      sb.append(this.jobId);
      sb.append(",callbackType:");
      sb.append(this.callbackType);
      sb.append(",callbackAddress:");
      sb.append(this.callbackAddress);
      sb.append(",callbackContent:");
      sb.append(this.callbackContent);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class submitJoblet_result implements TBase, java.io.Serializable   {
    private int success;
    private InvalidApiKey apiKeyException;
    private InvalidJobId jobIdException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
      public boolean jobIdException = false;
    }

    public submitJoblet_result() {
    }

    public submitJoblet_result(
      int success,
      InvalidApiKey apiKeyException,
      InvalidJobId jobIdException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.jobIdException = jobIdException;
      this.__isset.jobIdException = true;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidJobId getJobIdException() {
      return this.jobIdException;
    }

    public void setJobIdException(InvalidJobId jobIdException) {
      this.jobIdException = jobIdException;
      this.__isset.jobIdException = true;
    }

    public void unsetJobIdException() {
      this.jobIdException = null;
      this.__isset.jobIdException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitJoblet_result)
        return this.equals((submitJoblet_result)that);
      return false;
    }

    public boolean equals(submitJoblet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_jobIdException = true && (this.jobIdException != null);
      boolean that_present_jobIdException = true && (that.jobIdException != null);
      if (this_present_jobIdException || that_present_jobIdException) {
        if (!(this_present_jobIdException && that_present_jobIdException))
          return false;
        if (!this.jobIdException.equals(that.jobIdException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.jobIdException = new InvalidJobId();
              this.jobIdException.read(iprot);
              this.__isset.jobIdException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("submitJoblet_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I32;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.jobIdException) {
        if (this.jobIdException != null) {
          field.name = "jobIdException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.jobIdException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("submitJoblet_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",jobIdException:");
      sb.append(this.jobIdException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getJob_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private int jobId;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean jobId = false;
    }

    public getJob_args() {
    }

    public getJob_args(
      String apiKey,
      int jobId)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.jobId = jobId;
      this.__isset.jobId = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public int getJobId() {
      return this.jobId;
    }

    public void setJobId(int jobId) {
      this.jobId = jobId;
      this.__isset.jobId = true;
    }

    public void unsetJobId() {
      this.__isset.jobId = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJob_args)
        return this.equals((getJob_args)that);
      return false;
    }

    public boolean equals(getJob_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_jobId = true;
      boolean that_present_jobId = true;
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (this.jobId != that.jobId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.I32) {
              this.jobId = iprot.readI32();
              this.__isset.jobId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getJob_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      field.name = "jobId";
      field.type = TType.I32;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.jobId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getJob_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",jobId:");
      sb.append(this.jobId);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getJob_result implements TBase, java.io.Serializable   {
    private Job success;
    private InvalidApiKey apiKeyException;
    private InvalidJobId jobIdException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
      public boolean jobIdException = false;
    }

    public getJob_result() {
    }

    public getJob_result(
      Job success,
      InvalidApiKey apiKeyException,
      InvalidJobId jobIdException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.jobIdException = jobIdException;
      this.__isset.jobIdException = true;
    }

    public Job getSuccess() {
      return this.success;
    }

    public void setSuccess(Job success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidJobId getJobIdException() {
      return this.jobIdException;
    }

    public void setJobIdException(InvalidJobId jobIdException) {
      this.jobIdException = jobIdException;
      this.__isset.jobIdException = true;
    }

    public void unsetJobIdException() {
      this.jobIdException = null;
      this.__isset.jobIdException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJob_result)
        return this.equals((getJob_result)that);
      return false;
    }

    public boolean equals(getJob_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_jobIdException = true && (this.jobIdException != null);
      boolean that_present_jobIdException = true && (that.jobIdException != null);
      if (this_present_jobIdException || that_present_jobIdException) {
        if (!(this_present_jobIdException && that_present_jobIdException))
          return false;
        if (!this.jobIdException.equals(that.jobIdException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new Job();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.jobIdException = new InvalidJobId();
              this.jobIdException.read(iprot);
              this.__isset.jobIdException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getJob_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.jobIdException) {
        if (this.jobIdException != null) {
          field.name = "jobIdException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.jobIdException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getJob_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",jobIdException:");
      sb.append(this.jobIdException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getJobletResult_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private int jobletId;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean jobletId = false;
    }

    public getJobletResult_args() {
    }

    public getJobletResult_args(
      String apiKey,
      int jobletId)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.jobletId = jobletId;
      this.__isset.jobletId = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public int getJobletId() {
      return this.jobletId;
    }

    public void setJobletId(int jobletId) {
      this.jobletId = jobletId;
      this.__isset.jobletId = true;
    }

    public void unsetJobletId() {
      this.__isset.jobletId = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobletResult_args)
        return this.equals((getJobletResult_args)that);
      return false;
    }

    public boolean equals(getJobletResult_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_jobletId = true;
      boolean that_present_jobletId = true;
      if (this_present_jobletId || that_present_jobletId) {
        if (!(this_present_jobletId && that_present_jobletId))
          return false;
        if (this.jobletId != that.jobletId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.I32) {
              this.jobletId = iprot.readI32();
              this.__isset.jobletId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getJobletResult_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      field.name = "jobletId";
      field.type = TType.I32;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.jobletId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getJobletResult_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",jobletId:");
      sb.append(this.jobletId);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getJobletResult_result implements TBase, java.io.Serializable   {
    private JobletResult success;
    private InvalidApiKey apiKeyException;
    private InvalidJobletId jobletIdException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
      public boolean jobletIdException = false;
    }

    public getJobletResult_result() {
    }

    public getJobletResult_result(
      JobletResult success,
      InvalidApiKey apiKeyException,
      InvalidJobletId jobletIdException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public JobletResult getSuccess() {
      return this.success;
    }

    public void setSuccess(JobletResult success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidJobletId getJobletIdException() {
      return this.jobletIdException;
    }

    public void setJobletIdException(InvalidJobletId jobletIdException) {
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public void unsetJobletIdException() {
      this.jobletIdException = null;
      this.__isset.jobletIdException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobletResult_result)
        return this.equals((getJobletResult_result)that);
      return false;
    }

    public boolean equals(getJobletResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_jobletIdException = true && (this.jobletIdException != null);
      boolean that_present_jobletIdException = true && (that.jobletIdException != null);
      if (this_present_jobletIdException || that_present_jobletIdException) {
        if (!(this_present_jobletIdException && that_present_jobletIdException))
          return false;
        if (!this.jobletIdException.equals(that.jobletIdException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new JobletResult();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.jobletIdException = new InvalidJobletId();
              this.jobletIdException.read(iprot);
              this.__isset.jobletIdException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getJobletResult_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.jobletIdException) {
        if (this.jobletIdException != null) {
          field.name = "jobletIdException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.jobletIdException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getJobletResult_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",jobletIdException:");
      sb.append(this.jobletIdException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getResults_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private int jobId;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean jobId = false;
    }

    public getResults_args() {
    }

    public getResults_args(
      String apiKey,
      int jobId)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.jobId = jobId;
      this.__isset.jobId = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public int getJobId() {
      return this.jobId;
    }

    public void setJobId(int jobId) {
      this.jobId = jobId;
      this.__isset.jobId = true;
    }

    public void unsetJobId() {
      this.__isset.jobId = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResults_args)
        return this.equals((getResults_args)that);
      return false;
    }

    public boolean equals(getResults_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_jobId = true;
      boolean that_present_jobId = true;
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (this.jobId != that.jobId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.I32) {
              this.jobId = iprot.readI32();
              this.__isset.jobId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getResults_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      field.name = "jobId";
      field.type = TType.I32;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.jobId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResults_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",jobId:");
      sb.append(this.jobId);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getResults_result implements TBase, java.io.Serializable   {
    private List<JobletResult> success;
    private InvalidApiKey apiKeyException;
    private InvalidJobId jobletIdException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
      public boolean jobletIdException = false;
    }

    public getResults_result() {
    }

    public getResults_result(
      List<JobletResult> success,
      InvalidApiKey apiKeyException,
      InvalidJobId jobletIdException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<JobletResult> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(JobletResult elem) {
      if (this.success == null) {
        this.success = new ArrayList<JobletResult>();
      }
      this.success.add(elem);
      this.__isset.success = true;
    }

    public List<JobletResult> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<JobletResult> success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidJobId getJobletIdException() {
      return this.jobletIdException;
    }

    public void setJobletIdException(InvalidJobId jobletIdException) {
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public void unsetJobletIdException() {
      this.jobletIdException = null;
      this.__isset.jobletIdException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getResults_result)
        return this.equals((getResults_result)that);
      return false;
    }

    public boolean equals(getResults_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_jobletIdException = true && (this.jobletIdException != null);
      boolean that_present_jobletIdException = true && (that.jobletIdException != null);
      if (this_present_jobletIdException || that_present_jobletIdException) {
        if (!(this_present_jobletIdException && that_present_jobletIdException))
          return false;
        if (!this.jobletIdException.equals(that.jobletIdException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.LIST) {
              {
                TList _list19 = iprot.readListBegin();
                this.success = new ArrayList<JobletResult>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  JobletResult _elem21 = new JobletResult();
                  _elem21 = new JobletResult();
                  _elem21.read(iprot);
                  this.success.add(_elem21);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.jobletIdException = new InvalidJobId();
              this.jobletIdException.read(iprot);
              this.__isset.jobletIdException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getResults_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = 0;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
            for (JobletResult _iter22 : this.success)            {
              _iter22.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.jobletIdException) {
        if (this.jobletIdException != null) {
          field.name = "jobletIdException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.jobletIdException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getResults_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",jobletIdException:");
      sb.append(this.jobletIdException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getWork_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private int hostid;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean hostid = false;
    }

    public getWork_args() {
    }

    public getWork_args(
      String apiKey,
      int hostid)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.hostid = hostid;
      this.__isset.hostid = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public int getHostid() {
      return this.hostid;
    }

    public void setHostid(int hostid) {
      this.hostid = hostid;
      this.__isset.hostid = true;
    }

    public void unsetHostid() {
      this.__isset.hostid = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWork_args)
        return this.equals((getWork_args)that);
      return false;
    }

    public boolean equals(getWork_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_hostid = true;
      boolean that_present_hostid = true;
      if (this_present_hostid || that_present_hostid) {
        if (!(this_present_hostid && that_present_hostid))
          return false;
        if (this.hostid != that.hostid)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.I32) {
              this.hostid = iprot.readI32();
              this.__isset.hostid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getWork_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      field.name = "hostid";
      field.type = TType.I32;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.hostid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getWork_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",hostid:");
      sb.append(this.hostid);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getWork_result implements TBase, java.io.Serializable   {
    private Joblet success;
    private InvalidApiKey apiKeyException;
    private NoWorkAvailable noWorkException;
    private InvalidHost invalidHostException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
      public boolean noWorkException = false;
      public boolean invalidHostException = false;
    }

    public getWork_result() {
    }

    public getWork_result(
      Joblet success,
      InvalidApiKey apiKeyException,
      NoWorkAvailable noWorkException,
      InvalidHost invalidHostException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.noWorkException = noWorkException;
      this.__isset.noWorkException = true;
      this.invalidHostException = invalidHostException;
      this.__isset.invalidHostException = true;
    }

    public Joblet getSuccess() {
      return this.success;
    }

    public void setSuccess(Joblet success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.success = null;
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public NoWorkAvailable getNoWorkException() {
      return this.noWorkException;
    }

    public void setNoWorkException(NoWorkAvailable noWorkException) {
      this.noWorkException = noWorkException;
      this.__isset.noWorkException = true;
    }

    public void unsetNoWorkException() {
      this.noWorkException = null;
      this.__isset.noWorkException = false;
    }

    public InvalidHost getInvalidHostException() {
      return this.invalidHostException;
    }

    public void setInvalidHostException(InvalidHost invalidHostException) {
      this.invalidHostException = invalidHostException;
      this.__isset.invalidHostException = true;
    }

    public void unsetInvalidHostException() {
      this.invalidHostException = null;
      this.__isset.invalidHostException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWork_result)
        return this.equals((getWork_result)that);
      return false;
    }

    public boolean equals(getWork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && (this.success != null);
      boolean that_present_success = true && (that.success != null);
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_noWorkException = true && (this.noWorkException != null);
      boolean that_present_noWorkException = true && (that.noWorkException != null);
      if (this_present_noWorkException || that_present_noWorkException) {
        if (!(this_present_noWorkException && that_present_noWorkException))
          return false;
        if (!this.noWorkException.equals(that.noWorkException))
          return false;
      }

      boolean this_present_invalidHostException = true && (this.invalidHostException != null);
      boolean that_present_invalidHostException = true && (that.invalidHostException != null);
      if (this_present_invalidHostException || that_present_invalidHostException) {
        if (!(this_present_invalidHostException && that_present_invalidHostException))
          return false;
        if (!this.invalidHostException.equals(that.invalidHostException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new Joblet();
              this.success.read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.noWorkException = new NoWorkAvailable();
              this.noWorkException.read(iprot);
              this.__isset.noWorkException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.STRUCT) {
              this.invalidHostException = new InvalidHost();
              this.invalidHostException.read(iprot);
              this.__isset.invalidHostException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getWork_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.noWorkException) {
        if (this.noWorkException != null) {
          field.name = "noWorkException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.noWorkException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.invalidHostException) {
        if (this.invalidHostException != null) {
          field.name = "invalidHostException";
          field.type = TType.STRUCT;
          field.id = 3;
          oprot.writeFieldBegin(field);
          this.invalidHostException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getWork_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",noWorkException:");
      sb.append(this.noWorkException);
      sb.append(",invalidHostException:");
      sb.append(this.invalidHostException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class completeJoblet_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private int hostid;
    private int jobletId;
    private JobletResult result;
    private String logMessage;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean hostid = false;
      public boolean jobletId = false;
      public boolean result = false;
      public boolean logMessage = false;
    }

    public completeJoblet_args() {
    }

    public completeJoblet_args(
      String apiKey,
      int hostid,
      int jobletId,
      JobletResult result,
      String logMessage)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.hostid = hostid;
      this.__isset.hostid = true;
      this.jobletId = jobletId;
      this.__isset.jobletId = true;
      this.result = result;
      this.__isset.result = true;
      this.logMessage = logMessage;
      this.__isset.logMessage = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public int getHostid() {
      return this.hostid;
    }

    public void setHostid(int hostid) {
      this.hostid = hostid;
      this.__isset.hostid = true;
    }

    public void unsetHostid() {
      this.__isset.hostid = false;
    }

    public int getJobletId() {
      return this.jobletId;
    }

    public void setJobletId(int jobletId) {
      this.jobletId = jobletId;
      this.__isset.jobletId = true;
    }

    public void unsetJobletId() {
      this.__isset.jobletId = false;
    }

    public JobletResult getResult() {
      return this.result;
    }

    public void setResult(JobletResult result) {
      this.result = result;
      this.__isset.result = true;
    }

    public void unsetResult() {
      this.result = null;
      this.__isset.result = false;
    }

    public String getLogMessage() {
      return this.logMessage;
    }

    public void setLogMessage(String logMessage) {
      this.logMessage = logMessage;
      this.__isset.logMessage = true;
    }

    public void unsetLogMessage() {
      this.__isset.logMessage = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completeJoblet_args)
        return this.equals((completeJoblet_args)that);
      return false;
    }

    public boolean equals(completeJoblet_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_hostid = true;
      boolean that_present_hostid = true;
      if (this_present_hostid || that_present_hostid) {
        if (!(this_present_hostid && that_present_hostid))
          return false;
        if (this.hostid != that.hostid)
          return false;
      }

      boolean this_present_jobletId = true;
      boolean that_present_jobletId = true;
      if (this_present_jobletId || that_present_jobletId) {
        if (!(this_present_jobletId && that_present_jobletId))
          return false;
        if (this.jobletId != that.jobletId)
          return false;
      }

      boolean this_present_result = true && (this.result != null);
      boolean that_present_result = true && (that.result != null);
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      boolean this_present_logMessage = true && (this.logMessage != null);
      boolean that_present_logMessage = true && (that.logMessage != null);
      if (this_present_logMessage || that_present_logMessage) {
        if (!(this_present_logMessage && that_present_logMessage))
          return false;
        if (!this.logMessage.equals(that.logMessage))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.I32) {
              this.hostid = iprot.readI32();
              this.__isset.hostid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.I32) {
              this.jobletId = iprot.readI32();
              this.__isset.jobletId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4:
            if (field.type == TType.STRUCT) {
              this.result = new JobletResult();
              this.result.read(iprot);
              this.__isset.result = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5:
            if (field.type == TType.STRING) {
              this.logMessage = iprot.readString();
              this.__isset.logMessage = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("completeJoblet_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      field.name = "hostid";
      field.type = TType.I32;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.hostid);
      oprot.writeFieldEnd();
      field.name = "jobletId";
      field.type = TType.I32;
      field.id = 3;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.jobletId);
      oprot.writeFieldEnd();
      if (this.result != null) {
        field.name = "result";
        field.type = TType.STRUCT;
        field.id = 4;
        oprot.writeFieldBegin(field);
        this.result.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.logMessage != null) {
        field.name = "logMessage";
        field.type = TType.STRING;
        field.id = 5;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.logMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("completeJoblet_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",hostid:");
      sb.append(this.hostid);
      sb.append(",jobletId:");
      sb.append(this.jobletId);
      sb.append(",result:");
      sb.append(this.result);
      sb.append(",logMessage:");
      sb.append(this.logMessage);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class completeJoblet_result implements TBase, java.io.Serializable   {
    private InvalidApiKey apiKeyException;
    private InvalidJobletId jobletIdException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKeyException = false;
      public boolean jobletIdException = false;
    }

    public completeJoblet_result() {
    }

    public completeJoblet_result(
      InvalidApiKey apiKeyException,
      InvalidJobletId jobletIdException)
    {
      this();
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidJobletId getJobletIdException() {
      return this.jobletIdException;
    }

    public void setJobletIdException(InvalidJobletId jobletIdException) {
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public void unsetJobletIdException() {
      this.jobletIdException = null;
      this.__isset.jobletIdException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof completeJoblet_result)
        return this.equals((completeJoblet_result)that);
      return false;
    }

    public boolean equals(completeJoblet_result that) {
      if (that == null)
        return false;

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_jobletIdException = true && (this.jobletIdException != null);
      boolean that_present_jobletIdException = true && (that.jobletIdException != null);
      if (this_present_jobletIdException || that_present_jobletIdException) {
        if (!(this_present_jobletIdException && that_present_jobletIdException))
          return false;
        if (!this.jobletIdException.equals(that.jobletIdException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.jobletIdException = new InvalidJobletId();
              this.jobletIdException.read(iprot);
              this.__isset.jobletIdException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("completeJoblet_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.jobletIdException) {
        if (this.jobletIdException != null) {
          field.name = "jobletIdException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.jobletIdException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("completeJoblet_result(");
      sb.append("apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",jobletIdException:");
      sb.append(this.jobletIdException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class releaseJoblet_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private int hostid;
    private int jobletId;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean hostid = false;
      public boolean jobletId = false;
    }

    public releaseJoblet_args() {
    }

    public releaseJoblet_args(
      String apiKey,
      int hostid,
      int jobletId)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.hostid = hostid;
      this.__isset.hostid = true;
      this.jobletId = jobletId;
      this.__isset.jobletId = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public int getHostid() {
      return this.hostid;
    }

    public void setHostid(int hostid) {
      this.hostid = hostid;
      this.__isset.hostid = true;
    }

    public void unsetHostid() {
      this.__isset.hostid = false;
    }

    public int getJobletId() {
      return this.jobletId;
    }

    public void setJobletId(int jobletId) {
      this.jobletId = jobletId;
      this.__isset.jobletId = true;
    }

    public void unsetJobletId() {
      this.__isset.jobletId = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseJoblet_args)
        return this.equals((releaseJoblet_args)that);
      return false;
    }

    public boolean equals(releaseJoblet_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_hostid = true;
      boolean that_present_hostid = true;
      if (this_present_hostid || that_present_hostid) {
        if (!(this_present_hostid && that_present_hostid))
          return false;
        if (this.hostid != that.hostid)
          return false;
      }

      boolean this_present_jobletId = true;
      boolean that_present_jobletId = true;
      if (this_present_jobletId || that_present_jobletId) {
        if (!(this_present_jobletId && that_present_jobletId))
          return false;
        if (this.jobletId != that.jobletId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.I32) {
              this.hostid = iprot.readI32();
              this.__isset.hostid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.I32) {
              this.jobletId = iprot.readI32();
              this.__isset.jobletId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("releaseJoblet_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      field.name = "hostid";
      field.type = TType.I32;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.hostid);
      oprot.writeFieldEnd();
      field.name = "jobletId";
      field.type = TType.I32;
      field.id = 3;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.jobletId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("releaseJoblet_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",hostid:");
      sb.append(this.hostid);
      sb.append(",jobletId:");
      sb.append(this.jobletId);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class releaseJoblet_result implements TBase, java.io.Serializable   {
    private InvalidApiKey apiKeyException;
    private InvalidJobletId jobletIdException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKeyException = false;
      public boolean jobletIdException = false;
    }

    public releaseJoblet_result() {
    }

    public releaseJoblet_result(
      InvalidApiKey apiKeyException,
      InvalidJobletId jobletIdException)
    {
      this();
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidJobletId getJobletIdException() {
      return this.jobletIdException;
    }

    public void setJobletIdException(InvalidJobletId jobletIdException) {
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public void unsetJobletIdException() {
      this.jobletIdException = null;
      this.__isset.jobletIdException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseJoblet_result)
        return this.equals((releaseJoblet_result)that);
      return false;
    }

    public boolean equals(releaseJoblet_result that) {
      if (that == null)
        return false;

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_jobletIdException = true && (this.jobletIdException != null);
      boolean that_present_jobletIdException = true && (that.jobletIdException != null);
      if (this_present_jobletIdException || that_present_jobletIdException) {
        if (!(this_present_jobletIdException && that_present_jobletIdException))
          return false;
        if (!this.jobletIdException.equals(that.jobletIdException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.jobletIdException = new InvalidJobletId();
              this.jobletIdException.read(iprot);
              this.__isset.jobletIdException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("releaseJoblet_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.jobletIdException) {
        if (this.jobletIdException != null) {
          field.name = "jobletIdException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.jobletIdException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("releaseJoblet_result(");
      sb.append("apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",jobletIdException:");
      sb.append(this.jobletIdException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getJobletQueueSize_args implements TBase, java.io.Serializable   {
    private String apiKey;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
    }

    public getJobletQueueSize_args() {
    }

    public getJobletQueueSize_args(
      String apiKey)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobletQueueSize_args)
        return this.equals((getJobletQueueSize_args)that);
      return false;
    }

    public boolean equals(getJobletQueueSize_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getJobletQueueSize_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getJobletQueueSize_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class getJobletQueueSize_result implements TBase, java.io.Serializable   {
    private int success;
    private InvalidApiKey apiKeyException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean success = false;
      public boolean apiKeyException = false;
    }

    public getJobletQueueSize_result() {
    }

    public getJobletQueueSize_result(
      int success,
      InvalidApiKey apiKeyException)
    {
      this();
      this.success = success;
      this.__isset.success = true;
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      this.__isset.success = true;
    }

    public void unsetSuccess() {
      this.__isset.success = false;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJobletQueueSize_result)
        return this.equals((getJobletQueueSize_result)that);
      return false;
    }

    public boolean equals(getJobletQueueSize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("getJobletQueueSize_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I32;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("getJobletQueueSize_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(",apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class log_args implements TBase, java.io.Serializable   {
    private String apiKey;
    private int hostid;
    private int jobletId;
    private int status;
    private String message;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKey = false;
      public boolean hostid = false;
      public boolean jobletId = false;
      public boolean status = false;
      public boolean message = false;
    }

    public log_args() {
    }

    public log_args(
      String apiKey,
      int hostid,
      int jobletId,
      int status,
      String message)
    {
      this();
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
      this.hostid = hostid;
      this.__isset.hostid = true;
      this.jobletId = jobletId;
      this.__isset.jobletId = true;
      this.status = status;
      this.__isset.status = true;
      this.message = message;
      this.__isset.message = true;
    }

    public String getApiKey() {
      return this.apiKey;
    }

    public void setApiKey(String apiKey) {
      this.apiKey = apiKey;
      this.__isset.apiKey = true;
    }

    public void unsetApiKey() {
      this.__isset.apiKey = false;
    }

    public int getHostid() {
      return this.hostid;
    }

    public void setHostid(int hostid) {
      this.hostid = hostid;
      this.__isset.hostid = true;
    }

    public void unsetHostid() {
      this.__isset.hostid = false;
    }

    public int getJobletId() {
      return this.jobletId;
    }

    public void setJobletId(int jobletId) {
      this.jobletId = jobletId;
      this.__isset.jobletId = true;
    }

    public void unsetJobletId() {
      this.__isset.jobletId = false;
    }

    public int getStatus() {
      return this.status;
    }

    public void setStatus(int status) {
      this.status = status;
      this.__isset.status = true;
    }

    public void unsetStatus() {
      this.__isset.status = false;
    }

    public String getMessage() {
      return this.message;
    }

    public void setMessage(String message) {
      this.message = message;
      this.__isset.message = true;
    }

    public void unsetMessage() {
      this.__isset.message = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof log_args)
        return this.equals((log_args)that);
      return false;
    }

    public boolean equals(log_args that) {
      if (that == null)
        return false;

      boolean this_present_apiKey = true && (this.apiKey != null);
      boolean that_present_apiKey = true && (that.apiKey != null);
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_hostid = true;
      boolean that_present_hostid = true;
      if (this_present_hostid || that_present_hostid) {
        if (!(this_present_hostid && that_present_hostid))
          return false;
        if (this.hostid != that.hostid)
          return false;
      }

      boolean this_present_jobletId = true;
      boolean that_present_jobletId = true;
      if (this_present_jobletId || that_present_jobletId) {
        if (!(this_present_jobletId && that_present_jobletId))
          return false;
        if (this.jobletId != that.jobletId)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_message = true && (this.message != null);
      boolean that_present_message = true && (that.message != null);
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRING) {
              this.apiKey = iprot.readString();
              this.__isset.apiKey = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.I32) {
              this.hostid = iprot.readI32();
              this.__isset.hostid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3:
            if (field.type == TType.I32) {
              this.jobletId = iprot.readI32();
              this.__isset.jobletId = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4:
            if (field.type == TType.I32) {
              this.status = iprot.readI32();
              this.__isset.status = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5:
            if (field.type == TType.STRING) {
              this.message = iprot.readString();
              this.__isset.message = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("log_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.apiKey != null) {
        field.name = "apiKey";
        field.type = TType.STRING;
        field.id = 1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.apiKey);
        oprot.writeFieldEnd();
      }
      field.name = "hostid";
      field.type = TType.I32;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.hostid);
      oprot.writeFieldEnd();
      field.name = "jobletId";
      field.type = TType.I32;
      field.id = 3;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.jobletId);
      oprot.writeFieldEnd();
      field.name = "status";
      field.type = TType.I32;
      field.id = 4;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.status);
      oprot.writeFieldEnd();
      if (this.message != null) {
        field.name = "message";
        field.type = TType.STRING;
        field.id = 5;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.message);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("log_args(");
      sb.append("apiKey:");
      sb.append(this.apiKey);
      sb.append(",hostid:");
      sb.append(this.hostid);
      sb.append(",jobletId:");
      sb.append(this.jobletId);
      sb.append(",status:");
      sb.append(this.status);
      sb.append(",message:");
      sb.append(this.message);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class log_result implements TBase, java.io.Serializable   {
    private InvalidApiKey apiKeyException;
    private InvalidJobletId jobletIdException;

    public final Isset __isset = new Isset();
    public static final class Isset implements java.io.Serializable {
      public boolean apiKeyException = false;
      public boolean jobletIdException = false;
    }

    public log_result() {
    }

    public log_result(
      InvalidApiKey apiKeyException,
      InvalidJobletId jobletIdException)
    {
      this();
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public InvalidApiKey getApiKeyException() {
      return this.apiKeyException;
    }

    public void setApiKeyException(InvalidApiKey apiKeyException) {
      this.apiKeyException = apiKeyException;
      this.__isset.apiKeyException = true;
    }

    public void unsetApiKeyException() {
      this.apiKeyException = null;
      this.__isset.apiKeyException = false;
    }

    public InvalidJobletId getJobletIdException() {
      return this.jobletIdException;
    }

    public void setJobletIdException(InvalidJobletId jobletIdException) {
      this.jobletIdException = jobletIdException;
      this.__isset.jobletIdException = true;
    }

    public void unsetJobletIdException() {
      this.jobletIdException = null;
      this.__isset.jobletIdException = false;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof log_result)
        return this.equals((log_result)that);
      return false;
    }

    public boolean equals(log_result that) {
      if (that == null)
        return false;

      boolean this_present_apiKeyException = true && (this.apiKeyException != null);
      boolean that_present_apiKeyException = true && (that.apiKeyException != null);
      if (this_present_apiKeyException || that_present_apiKeyException) {
        if (!(this_present_apiKeyException && that_present_apiKeyException))
          return false;
        if (!this.apiKeyException.equals(that.apiKeyException))
          return false;
      }

      boolean this_present_jobletIdException = true && (this.jobletIdException != null);
      boolean that_present_jobletIdException = true && (that.jobletIdException != null);
      if (this_present_jobletIdException || that_present_jobletIdException) {
        if (!(this_present_jobletIdException && that_present_jobletIdException))
          return false;
        if (!this.jobletIdException.equals(that.jobletIdException))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case 1:
            if (field.type == TType.STRUCT) {
              this.apiKeyException = new InvalidApiKey();
              this.apiKeyException.read(iprot);
              this.__isset.apiKeyException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2:
            if (field.type == TType.STRUCT) {
              this.jobletIdException = new InvalidJobletId();
              this.jobletIdException.read(iprot);
              this.__isset.jobletIdException = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("log_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.apiKeyException) {
        if (this.apiKeyException != null) {
          field.name = "apiKeyException";
          field.type = TType.STRUCT;
          field.id = 1;
          oprot.writeFieldBegin(field);
          this.apiKeyException.write(oprot);
          oprot.writeFieldEnd();
        }
      } else if (this.__isset.jobletIdException) {
        if (this.jobletIdException != null) {
          field.name = "jobletIdException";
          field.type = TType.STRUCT;
          field.id = 2;
          oprot.writeFieldBegin(field);
          this.jobletIdException.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("log_result(");
      sb.append("apiKeyException:");
      sb.append(this.apiKeyException);
      sb.append(",jobletIdException:");
      sb.append(this.jobletIdException);
      sb.append(")");
      return sb.toString();
    }

  }

}
